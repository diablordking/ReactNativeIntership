"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createAutoSubscriber = createAutoSubscriber;
exports.default = autoSubscriber;

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* AutoSubscriber

 Subscriber for React components.
 Component must specify getSubs(props, state) and subscribeSubs(subs, props, state). Both can be static.

 */
function wrapSubs(subs) {
    if (subs && subs.constructor !== Array) {
        subs = [subs];
    }
    return subs || [];
}
function getSubKeys(subs) {
    return Object.keys(subs || {}).map(function (k) {
        return subs[k].subKey;
    }).sort().join(",");
}

var AutoSubscriber = function () {
    function AutoSubscriber(Component, inst, subCallbacks) {
        _classCallCheck(this, AutoSubscriber);

        //Support static and instance methods
        this._inst = inst;
        this._getSubs = subCallbacks && subCallbacks.getSubs ? subCallbacks.getSubs : Component.getSubs || (inst.getSubs ? inst.getSubs.bind(inst) : undefined);
        this._subscribeSubs = subCallbacks && subCallbacks.subscribeSubs ? subCallbacks.subscribeSubs : Component.subscribeSubs || (inst.subscribeSubs ? inst.subscribeSubs.bind(inst) : undefined);
        this.checkAndStubMethods(Component);
    }

    _createClass(AutoSubscriber, [{
        key: "updateSubscriptions",
        value: function updateSubscriptions(props, state) {
            var subs = wrapSubs(this._getSubs(props, state));
            if (getSubKeys(subs) !== getSubKeys(this._subs)) {
                //Only unsubscribe/subscribe if subKeys have changed
                this._subs = subs;
                var unsub = this._unsub;
                var subscribeResult = this._subscribeSubs(subs, props, state);
                if (subscribeResult.unsubscribe) {
                    this._unsub = subscribeResult.unsubscribe;
                } else {
                    this._unsub = subscribeResult;
                }
                if (subscribeResult.promise) {
                    this._inst.__autoSubscriberUpdateFetchingErrorState(subscribeResult.promise);
                }
                //Unsubscribe from old subscriptions
                if (unsub) unsub();
            }
        }
    }, {
        key: "unsubscribe",
        value: function unsubscribe() {
            if (this._unsub) {
                this._unsub();
                this._unsub = null;
            }
        }
    }, {
        key: "checkAndStubMethods",
        value: function checkAndStubMethods(Component) {
            if (!this._getSubs || !this._subscribeSubs) {
                var componentName = Component.displayName || Component.name || "unknown component";
                console.error("firebase-nest: define getSubs and subscribeSubs on " + componentName + " component or pass them to createAutoSubscriber");
                this._getSubs = function () {
                    return [];
                };
            }
        }
    }]);

    return AutoSubscriber;
}();

function createAutoSubscriber(subCallbacks) {
    return function (Component) {
        return autoSubscriber(Component, subCallbacks);
    };
}
function autoSubscriber(Component, subCallbacks) {
    return function (_Component) {
        _inherits(_class, _Component);

        function _class(props) {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

            if (!_this.state) {
                _this.state = {};
            }
            _this.$autoSubscriber = new AutoSubscriber(Component, _this, subCallbacks);
            return _this;
        }

        _createClass(_class, [{
            key: "__autoSubscriberUpdateFetchingErrorState",
            value: function __autoSubscriberUpdateFetchingErrorState(promise) {
                var _this2 = this;

                this.setState && this.setState({
                    _autoSubscriberFetching: true,
                    _autoSubscriberError: null
                }, function () {
                    promise.then(function () {
                        _this2.setState({
                            _autoSubscriberFetching: false
                        });
                    }, function (error) {
                        _this2.setState({
                            _autoSubscriberFetching: false,
                            _autoSubscriberError: error
                        });
                    });
                });
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentDidMount", this)) _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentDidMount", this).call(this);
                this.$autoSubscriber.updateSubscriptions(this.props, this.state);
            }
            //If a component is receiving new props, check and possibly update its subscriptions

        }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(props) {
                if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentWillReceiveProps", this)) _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentWillReceiveProps", this).call(this, props);
                this.$autoSubscriber.updateSubscriptions(props, this.state);
            }
            //If a component has updated (has received new props or state), check and possibly update its subscriptions

        }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
                if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentDidUpdate", this)) _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentDidUpdate", this).call(this);
                this.$autoSubscriber.updateSubscriptions(this.props, this.state);
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentWillUnmount", this)) _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "componentWillUnmount", this).call(this);
                this.$autoSubscriber.unsubscribe();
                this.$autoSubscriber = null;
            }
        }, {
            key: "render",
            value: function render() {
                var getSubs = this.$autoSubscriber._getSubs;
                //specifically done for mobx, to re-render based on any observables accessed in getSubs.
                //for example, if getSubs returns subs based on a logged-in observable flag.
                getSubs && getSubs(this.props, this.state);
                return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "render", this).call(this);
            }
        }]);

        return _class;
    }(Component);
}